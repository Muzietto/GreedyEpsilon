/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package net.faustinelli.greedyepsilon.algo;

import java.util.Collections;
import java.util.Random;

/**
 * epsilon = 1.0 --> always explore
 * epsilon = 0.0 --> always exploit
 * This class decreases its epsilon linearly from startEpsilon to 0.0
 * during each simulation.
 * 
 * @author Marco Faustinelli <contatti@faustinelli.net>
 */
public class ExploitMeasuringEpsilonGreedy extends EpsilonGreedy implements BanditAlgorithm {

    public ExploitMeasuringEpsilonGreedy(Double startEpsilon, Integer armsNo, Random randomizer, String identifier) {
        super(startEpsilon, armsNo, randomizer, identifier);
    }

    /**
     * returns a negative armIndex when exploring
     * in both cases armIndex is increased/decreased by 1,
     * in order to distinguish
     * arm 0 in exploitation and in exploration
     */
    @Override
    public Integer selectArm() {
        if (_randomizer.nextDouble() > _epsilon) {  // exploit --> return positive
            return _values.indexOf((Collections.max(_values))) + 1;
        } else {  // explore --> return negative
            return -_randomizer.nextInt(_values.size()) - 1;
        }
    }
}
